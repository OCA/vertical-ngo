-
  Given I create a logistic requisition
-
  !record {model: logistic.requisition, id: logistic_requisition_cost_estimate_01}:
    partner_id: base.res_partner_4
    consignee_id: base.res_partner_3
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    user_id: base.user_demo
    incoterm_id: stock.incoterm_FCA
    incoterm_address: incoterm address as text
    analytic_id: account.analytic_consultancy
    pricelist_id: product.list0
-
  And I add a line 1
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_cost_estimate_01}:
    requisition_id: logistic_requisition_cost_estimate_01
    product_id: product.product_product_7
    requested_qty: 100
    requested_uom_id: product.product_uom_unit
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    budget_tot_price: 1000
    logistic_user_id: base.user_demo
-
  And I add a source line to the line 1
-
  !record {model: logistic.requisition.source, id: logistic_requisition_source_cost_estimate_01}:
    requisition_line_id: logistic_requisition_line_cost_estimate_01
    proposed_qty: 110
    proposed_product_id: product.product_product_7
    proposed_uom_id: product.product_uom_unit
    unit_cost: 8
    transport_applicable: 0
    procurement_method: wh_dispatch
    price_is: fixed
    dispatch_location_id: stock.stock_location_shop1
-
  And I add a line 2
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_cost_estimate_02}:
    requisition_id: logistic_requisition_cost_estimate_01
    product_id: product.product_product_8
    requested_qty: 100
    requested_uom_id: product.product_uom_unit
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    budget_tot_price: 1000
    logistic_user_id: base.user_demo
-
  And I add a source line to the line 2
-
  !record {model: logistic.requisition.source, id: logistic_requisition_source_cost_estimate_02}:
    requisition_line_id: logistic_requisition_line_cost_estimate_02
    proposed_qty: 90
    proposed_product_id: product.product_product_8
    proposed_uom_id: product.product_uom_unit
    unit_cost: 8
    transport_applicable: 0
    procurement_method: wh_dispatch
    price_is: estimated
    dispatch_location_id: stock.stock_location_shop1
-
  When I confirm the logistic requisition
-
  !python {model: logistic.requisition}: |
    req = self.browse(cr, uid, ref("logistic_requisition_cost_estimate_01"))
    req.button_confirm()
-
  And I source the lines
-
  !python {model: logistic.requisition.line}: |
    line1_id = ref("logistic_requisition_line_cost_estimate_01")
    line2_id = ref("logistic_requisition_line_cost_estimate_02")
    ids = [line1_id, line2_id]
    # The initial yaml does not set it to false, probably
    # a bug related to the application of the default values
    # However, we need to not have this flag to source the lines
    self.write(cr, uid, ids, {'transport_applicable': False})
    self.button_sourced(cr, uid, ids)
-
  I open the wizard to create a cost estimate from the logistic requisition,
  but it fails because the business rules are not satisfied.
-
  !python {model: logistic.requisition.cost.estimate}: |
    from openerp.osv import orm
    context = {'active_model': 'logistic.requisition',
               'active_ids': [ref('logistic_requisition_cost_estimate_01')],
               }
    wizard_id = self.create(cr, uid, {}, context=context)
    try:
        self.cost_estimate(cr, uid, wizard_id)
    except orm.except_orm as err:
        assert 'NO_BUDGET_VALID' in err.error_codes, (
                'Expected an error because the budget holder is missing')
        assert 'NO_ACCOUNT_CODE' in err.error_codes, (
                'Expected an error because the account code is missing')
    else:
        raise AssertionError('Expected an orm.except_orm error, got nothing')
-
  I set some data to fulfill the business rules
-
  !record {model: logistic.requisition, id: logistic_requisition_cost_estimate_01}:
    budget_holder_id: base.user_demo
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_cost_estimate_01}:
    account_code: 'XXXX'
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_cost_estimate_02}:
    account_code: 'YYYY'
-
  I open the wizard to create a cost estimate from the logistic requisition
-
  !python {model: logistic.requisition.cost.estimate}: |
    context = {'active_model': 'logistic.requisition',
               'active_ids': [ref('logistic_requisition_cost_estimate_01')],
               }
    wizard_id = self.create(cr, uid, {}, context=context)
    open_action = self.cost_estimate(cr, uid, wizard_id)
    cost_estimate_id = open_action['res_id']
    cost_estimate_obj = self.pool.get('sale.order')
    cost_estimate = cost_estimate_obj.browse(cr, uid, cost_estimate_id)
    assert len(cost_estimate.order_line) == 2, (
        "Cost Estimate should have 2 lines, 1 per logistic requisition line")
-
  I check if the information of the logistic requisition are propagated correctly
-
  !python {model: logistic.requisition}: |
    req = self.browse(cr, uid, ref("logistic_requisition_cost_estimate_01"))
    sale_obj = self.pool.get('sale.order')
    sale_ids = sale_obj.search(cr, uid, [('requisition_id', '=', req.id)])
    assert len(sale_ids) == 1
    sale = sale_obj.browse(cr, uid, sale_ids[0])
    assert sale.partner_id == req.partner_id
    assert sale.partner_invoice_id == req.partner_id
    assert sale.consignee_id == req.consignee_id
    assert sale.incoterm == req.incoterm_id
    assert sale.incoterm_address == req.incoterm_address
    assert sale.project_id == req.analytic_id
-
  I check if the information of the lines is correct
-
  !python {model: logistic.requisition.source}: |
    def check_line(self, cr, uid, line_id):
        # the upper scope is not accessible here,
        # that's why self, cr, uid are passed as arguments
        sale_line_obj = self.pool.get('sale.order.line')
        sale_line_ids = sale_line_obj.search(
            cr, uid, [('logistic_requisition_source_id', '=', line_id)])
        assert len(sale_line_ids) == 1
        sale_line = sale_line_obj.browse(cr, uid, sale_line_ids[0])
        source = self.browse(cr, uid, line_id)
        line = source.requisition_line_id
        assert sale_line.product_id == source.proposed_product_id, (
            "product_id should be %s, received %s" %
            (source.proposed_product_id, sale_line.product_id))

        assert sale_line.name == line.description, (
            "name should be %s, received %s" %
            (line.description, sale_line.name))

        assert sale_line.product_uom_qty == source.proposed_qty, (
            "qty should be %s, received %s" %
            (source.proposed_qty, sale_line.product_uom_qty))

        assert sale_line.product_uom == source.proposed_uom_id, (
            "unit of measure should be %s, received %s" %
            (source.proposed_uom_id, sale_line.product_uom))

        assert sale_line.price_unit == source.unit_cost, (
            "price_unit should be %s, received %s" %
            (source.unit_cost, sale_line.price_unit))

        assert sale_line.price_is == source.price_is, (
            "price_is should be %s, received %s" %
            (source.price_is, sale_line.price_is))
        assert_type = ('make_to_stock'
                       if source.procurement_method == 'wh_dispatch'
                       else 'make_to_order')
        assert sale_line.type == assert_type, (
            "Type should be %s, received: %s" % (assert_type, sale_line.type))

        if source.procurement_method != 'wh_dispatch':
            assert sale_line.sale_flow == 'direct_delivery', (
                "A line not in 'Warehouse dispatch' should be in direct delivery")

        if source.dispatch_location_id:
            assert sale_line.location_id == source.dispatch_location_id, (
                "dispatch should be %s, received %s" %
                (source.dispatch_location_id, sale_line.location_id))
        else:
            assert not sale_line.location_id, (
                "No dispatch location on requisition line, but received a "
                "location in sale order line")

    source1_id = ref("logistic_requisition_source_cost_estimate_01")
    source2_id = ref("logistic_requisition_source_cost_estimate_02")
    check_line(self, cr, uid, source1_id)
    check_line(self, cr, uid, source2_id)
