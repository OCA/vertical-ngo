-
  In order to test the relations between transport plan and logistic
  requisitions, I create a transport plan
-
  !record {model: transport.plan, id: transport_plan_01}:
    transport_mode_id: transport_plan.transport_mode1
    date_eta: !eval "time.strftime('%Y-%m-%d')"
    from_address_id: base.res_partner_3
    to_address_id: base.res_partner_4
-
  And a second transport plan
-
  !record {model: transport.plan, id: transport_plan_02}:
    transport_mode_id: transport_plan.transport_mode5
    date_eta: !eval "time.strftime('%Y-%m-%d')"
    from_address_id: base.res_partner_3
    to_address_id: base.res_partner_4
-
  I create a logistic requisition
-
  !record {model: logistic.requisition, id: logistic_requisition_tp_01}:
    partner_id: base.res_partner_4
    consignee_id: base.res_partner_3
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    user_id: base.user_demo
    pricelist_id: product.list0
-
  And I add a line 1
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_tp_01}:
    requisition_id: logistic_requisition_tp_01
    product_id: product.product_product_7
    requested_qty: 100
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    logistic_user_id: base.user_demo
-
  And I add a source line 1
-
  !record {model: logistic.requisition.source, id: logistic_requisition_source_tp_01}:
    requisition_line_id: logistic_requisition_line_tp_01
    proposed_qty: 100
    proposed_product_id: product.product_product_7
    unit_cost: 10
    transport_applicable: 1
    price_is: estimated
    procurement_method: wh_dispatch
-
  And I add a line 2
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_tp_02}:
    requisition_id: logistic_requisition_tp_01
    product_id: product.product_product_8
    requested_qty: 100
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    logistic_user_id: base.user_demo
-
  And I add a source line 2
-
  !record {model: logistic.requisition.source, id: logistic_requisition_source_tp_02}:
    requisition_line_id: logistic_requisition_line_tp_02
    proposed_qty: 100
    proposed_product_id: product.product_product_8
    unit_cost: 10
    transport_applicable: 1
    price_is: estimated
    procurement_method: wh_dispatch
-
  When I search for a transport plan without requisition, I should find both
-
  !python {model: transport.plan}: |
    tp1_id = ref("transport_plan_01")
    tp2_id = ref("transport_plan_02")
    tp_ids = self.search(cr, uid, [('logistic_requisition_id', '=', False)])
    assert tp1_id in tp_ids, "Tranport plan 1 not found"
    assert tp2_id in tp_ids, "Tranport plan 2 not found"
-
  When I assign the first transport plan to the first requisition source line
-
  !record {model: logistic.requisition.source, id: logistic_requisition_source_tp_01}:
    transport_plan_id: transport_plan_01
-
  Then the logistic requisition id of the transport plan should be the
  one of the source line
-
  !assert {model: transport.plan, id: transport_plan_01, string: The transport plan should be assigned to the requisition}:
    - logistic_requisition_id.id == ref('logistic_requisition_tp_01')
-
  If I create a new logistic requisition
-
  !record {model: logistic.requisition, id: logistic_requisition_tp_10}:
    partner_id: base.res_partner_4
    consignee_id: base.res_partner_3
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    user_id: base.user_demo
    pricelist_id: product.list0
-
  With a line
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_tp_10}:
    requisition_id: logistic_requisition_tp_10
    product_id: product.product_product_7
    requested_qty: 100
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    logistic_user_id: base.user_demo
-
  And I add a source line
-
  !record {model: logistic.requisition.source, id: logistic_requisition_source_tp_10}:
    requisition_line_id: logistic_requisition_line_tp_10
    proposed_qty: 100
    proposed_product_id: product.product_product_7
    unit_cost: 10
    transport_applicable: 1
    price_is: estimated
    procurement_method: wh_dispatch
-
  I should not be allowed to assign the same transport plan to a different
  logistic requisition
-
  !python {model: logistic.requisition.source}: |
    source_id = ref("logistic_requisition_source_tp_10")
    tp1_id = ref('transport_plan_01')
    try:
        self.write(cr, uid, source_id, {'transport_plan_id': tp1_id})
    except Exception as err:
        assert err[0] == 'ValidateError', "Expected a ValidateError, got %s" % err
    else:
        raise AssertionError('Expected a ValidateError, got nothing')
-
  But I should be able to assign an other transport plan to a different logistic
  requisition
-
  !record {model: logistic.requisition.source, id: logistic_requisition_source_tp_10}:
    transport_plan_id: transport_plan_02
-
 It should be assigned
-
  !assert {model: transport.plan, id: transport_plan_02, string: The transport plan should be assigned to the requisition}:
    - logistic_requisition_id.id == ref('logistic_requisition_tp_10')
-
  When I remove the transport plan from the line, the transport plan
  should no longer be assigned to the logistic requisition
-
  !record {model: logistic.requisition.source, id: logistic_requisition_source_tp_10}:
    transport_plan_id: False
-
 It should no longer be assigned
-
  !assert {model: transport.plan, id: transport_plan_02, string: The transport plan should be assigned to the requisition}:
    - not logistic_requisition_id
