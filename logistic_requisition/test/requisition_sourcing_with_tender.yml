-
  Given I create a logistic requisition
-
  !record {model: logistic.requisition, id: logistic_requisition_tender_11}:
    partner_id: base.res_partner_4
    consignee_id: base.res_partner_3
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    user_id: base.user_demo
    incoterm_id: stock.incoterm_FCA
    incoterm_address: incoterm address as text
    analytic_id: account.analytic_consultancy
    pricelist_id: product.list0
-
  And I add a line 1
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_tender_11}:
    requisition_id: logistic_requisition_tender_11
    product_id: product.product_product_32
    description: "[HEAD] Headset standard"
    requested_qty: 100
    requested_uom_id: product.product_uom_unit
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    logistic_user_id: base.user_demo
-
  And I add a source line to the line 1
-
  !record {model: logistic.requisition.source, id: logistic_requisition_source_tender_11}:
    requisition_line_id: logistic_requisition_line_tender_11
    proposed_qty: 110
    proposed_product_id: product.product_product_32
    proposed_uom_id: product.product_uom_unit
    unit_cost: 8
    procurement_method: procurement
    price_is: fixed
    dispatch_location_id: stock.stock_location_components
-
  And I add a line 2
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_tender_12}:
    requisition_id: logistic_requisition_tender_11
    product_id: product.product_product_25
    description: "[LAP-E5] Laptop E5023"
    requested_qty: 100
    requested_uom_id: product.product_uom_unit
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    logistic_user_id: base.user_demo
-
  And I add a source line to the line 2
-
  !record {model: logistic.requisition.source, id: logistic_requisition_source_tender_12}:
    requisition_line_id: logistic_requisition_line_tender_12
    proposed_qty: 90
    proposed_product_id: product.product_product_25
    proposed_uom_id: product.product_uom_unit
    unit_cost: 8
    procurement_method: procurement
    price_is: estimated
    dispatch_location_id: stock.stock_location_components
-
  When I confirm the logistic requisition
-
  !python {model: logistic.requisition, id: logistic_requisition_tender_11}: |
    self.button_confirm()
-
  And I create the PR, and I validate it
-
  !python {model: logistic.requisition.source.create.requisition}: |
    line1_id = ref("logistic_requisition_source_tender_11")
    line2_id = ref("logistic_requisition_source_tender_12")
    active_ids = [line1_id, line2_id]
    ctx = context.copy()
    ctx['active_ids'] = active_ids
    id = self.create(cr, uid, {}, ctx)
    print id
    wizard = self.browse(cr, uid, id, ctx)
    res = wizard.create_po_requisition()
    requisition = self.pool['purchase.requisition'].browse(cr, uid, res['res_id'])
    requisition.write({'bid_tendering_mode': 'restricted'})
    requisition.signal_workflow('sent_suppliers')
    wizard_partner = self.pool['purchase.requisition.partner']
    wiz_id = wizard_partner.create(cr, uid, {'partner_id': ref('base.res_partner_1')})
    wizard_partner.create_order(cr, uid, [wiz_id],
                                {'active_model': 'purchase.requisition',
                                 'active_id': requisition.id,
                                 'active_ids': [requisition.id]})
    # send the RFQ
    requisition.refresh()
    for rfq in requisition.purchase_ids:
        rfq.print_quotation()
    # encode the bids
    for rfq in requisition.purchase_ids:
        for line in rfq.order_line:
            line.write({'price_unit': 0.4})
    # run the bid encoded wizard
    wizard = self.pool['purchase.action_modal.datetime']
    id = wizard.create(cr, uid, {'datetime': '2013-08-13 00:00:00'})
    purchase_obj = self.pool['purchase.order']
    for rfq in requisition.purchase_ids:
        purchase_obj.bid_received(cr, uid, [rfq.id], context={'active_id': id})
    # close the PR
    requisition.signal_workflow('open_bid')
    # select the first bid
    rfq = requisition.purchase_ids[0]
    for line in rfq.order_line:
      line.action_confirm()
    requisition.close_callforbids()
-
 And I source the lines
-
  !python {model: logistic.requisition.line}: |
    line1_id = ref("logistic_requisition_line_tender_11")
    line2_id = ref("logistic_requisition_line_tender_12")
    ids = [line1_id, line2_id]
    self.button_sourced(cr, uid, ids)
-
  I open the wizard to create a cost estimate from the logistic requisition
-
  !python {model: logistic.requisition.cost.estimate}: |
    context = {'active_model': 'logistic.requisition',
               'active_ids': [ref('logistic_requisition_tender_11')],
               }
    wizard_id = self.create(cr, uid, {}, context=context)
    open_action = self.cost_estimate(cr, uid, wizard_id)
    cost_estimate_id = open_action['res_id']
    cost_estimate_obj = self.pool.get('sale.order')
    cost_estimate = cost_estimate_obj.browse(cr, uid, cost_estimate_id)
    assert len(cost_estimate.order_line) == 2, (
        "Cost Estimate should have 2 lines, 1 per logistic requisition line")
    for line in cost_estimate.order_line:
        po_line = line.sourced_by
        assert(po_line, 'missing sourced by')
        print po_line

-
  I check if the information of the logistic requisition are propagated correctly
-
  !python {model: logistic.requisition, id: logistic_requisition_tender_11}: |
    sale_obj = self.env['sale.order']
    sale = sale_obj.search([('requisition_id', '=', self.id)])
    sale.ensure_one()
    assert sale.partner_id == self.partner_id
    assert sale.partner_invoice_id == self.partner_id
    assert sale.consignee_id == self.consignee_id
    assert sale.incoterm == self.incoterm_id
    assert sale.incoterm_address == self.incoterm_address
    assert sale.project_id == self.analytic_id
-
  I check if the information of the lines is correct
-
  !python {model: logistic.requisition.source}: |
    def check_line(self, cr, uid, source_line_id):
        # the upper scope is not accessible here,
        # that's why self, cr, uid are passed as arguments
        location_obj = self.pool['stock.location']
        source = self.browse(cr, uid, source_line_id)
        sale_lines = source.requisition_id.line_ids[0].cost_estimate_id.order_line
        sale_line = [line for line in sale_lines if line.product_id == source.proposed_product_id][0]
        line = source.requisition_line_id
        assert sale_line.product_id == source.proposed_product_id, (
            "product_id should be %s, received %s" %
            (source.proposed_product_id, sale_line.product_id))

        assert sale_line.name == line.description, (
            "name should be %s, received %s" %
            (line.description, sale_line.name))

        assert sale_line.product_uom_qty == source.proposed_qty, (
            "qty should be %s, received %s" %
            (source.proposed_qty, sale_line.product_uom_qty))

        assert sale_line.product_uom == source.proposed_uom_id, (
            "unit of measure should be %s, received %s" %
            (source.proposed_uom_id, sale_line.product_uom))

        assert sale_line.price_unit == source.unit_cost, (
            "price_unit should be %s, received %s" %
            (source.unit_cost, sale_line.price_unit))

        assert sale_line.price_is == source.price_is, (
            "price_is should be %s, received %s" %
            (source.price_is, sale_line.price_is))
        if source.procurement_method != 'procurement':
          # XXX find useful assertions here
          pass
        loc = source.dispatch_location_id
        if location_obj.get_warehouse(cr, uid, loc):
            assert sale_line.warehouse_id.id == location_obj.get_warehouse(cr, uid, loc), (
                "dispatch should be %s, received %s" %
                (location_obj.get_warehouse(cr, uid, loc), sale_line.warehouse_id.id))
        else:
            assert not sale_line.warehouse_id, (
                "No dispatch location on requisition line, but received a "
                "location in sale order line")

    source1_id = ref("logistic_requisition_source_tender_11")
    source2_id = ref("logistic_requisition_source_tender_12")
    check_line(self, cr, uid, source1_id)
    check_line(self, cr, uid, source2_id)
