-
  In order to test the creation of a cost estimate with transport plans.
  I create a transport plan
-
  !record {model: transport.plan, id: transport_plan_tpe_01}:
    transport_mode_id: transport_plan.transport_mode1
    date_eta: !eval "(datetime.now() + timedelta(days=8)).strftime('%Y-%m-%d')"
    date_etd: !eval "(datetime.now() + timedelta(days=2)).strftime('%Y-%m-%d')"
    from_address_id: base.res_partner_3
    to_address_id: base.res_partner_4
    transport_estimated_cost: 1000
-
  And a second transport plan
-
  !record {model: transport.plan, id: transport_plan_tpe_02}:
    transport_mode_id: transport_plan.transport_mode5
    date_eta: !eval "(datetime.now() + timedelta(days=10)).strftime('%Y-%m-%d')"
    date_etd: !eval "(datetime.now() + timedelta(days=3)).strftime('%Y-%m-%d')"
    from_address_id: base.res_partner_3
    to_address_id: base.res_partner_4
    transport_estimated_cost: 1345
-
  And I create a logistic requisition
-
  !record {model: logistic.requisition, id: logistic_requisition_tpe_01}:
    partner_id: base.res_partner_4
    consignee_id: base.res_partner_3
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    user_id: base.user_demo
    pricelist_id: product.list0
-
  And I add a line 1
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_tpe_01}:
    requisition_id: logistic_requisition_tpe_01
    product_id: product.product_product_7
    requested_qty: 100
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    logistic_user_id: base.user_demo
    account_code: 'XXXX'
-
  And I add a sourcing line 1
-
  !record {model: logistic.requisition.source, id: logistic_requisition_source_tpe_01}:
    requisition_line_id: logistic_requisition_line_tpe_01
    proposed_qty: 100
    proposed_product_id: product.product_product_7
    unit_cost: 10
    transport_applicable: 1
    transport_plan_id: transport_plan_tpe_01
    procurement_method: wh_dispatch
    price_is: estimated
-
  And I add a line 2
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_tpe_02}:
    requisition_id: logistic_requisition_tpe_01
    product_id: product.product_product_8
    requested_qty: 100
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    logistic_user_id: base.user_demo
    account_code: 'YYYY'
-
  And I add a sourcing line 2
-
  !record {model: logistic.requisition.source, id: logistic_requisition_source_tpe_02}:
    requisition_line_id: logistic_requisition_line_tpe_02
    proposed_qty: 100
    proposed_product_id: product.product_product_8
    unit_cost: 10
    transport_applicable: 1
    transport_plan_id: transport_plan_tpe_01
    procurement_method: wh_dispatch
    price_is: estimated
-
  And I add a line 3
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_tpe_03}:
    requisition_id: logistic_requisition_tpe_01
    product_id: product.product_product_8
    requested_qty: 100
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    logistic_user_id: base.user_demo
    account_code: 'ZZZZ'
-
  And I add a sourcing line 3
-
  !record {model: logistic.requisition.source, id: logistic_requisition_source_tpe_03}:
    requisition_line_id: logistic_requisition_line_tpe_03
    proposed_qty: 100
    proposed_product_id: product.product_product_8
    unit_cost: 10
    transport_applicable: 1
    transport_plan_id: transport_plan_tpe_02
    procurement_method: wh_dispatch
    price_is: estimated
-
  And I confirm the logistic requisition
-
  !python {model: logistic.requisition}: |
    req_id = ref("logistic_requisition_tpe_01")
    self.button_confirm(cr, uid, [req_id])
-
  And I source the lines
-
  !python {model: logistic.requisition.line}: |
    line1_id = ref("logistic_requisition_line_tpe_01")
    line2_id = ref("logistic_requisition_line_tpe_02")
    line3_id = ref("logistic_requisition_line_tpe_03")
    ids = [line1_id, line2_id, line3_id]
    self.button_sourced(cr, uid, ids)
-
  I open the wizard to create a cost estimate from the logistic requisition
-
  !python {model: logistic.requisition.cost.estimate}: |
    context = {'active_model': 'logistic.requisition',
               'active_ids': [ref('logistic_requisition_tpe_01')],
               }
    wizard_id = self.create(cr, uid, {}, context=context)
    open_action = self.cost_estimate(cr, uid, wizard_id)
    cost_estimate_id = open_action['res_id']
    cost_estimate_obj = self.pool.get('sale.order')
    cost_estimate = cost_estimate_obj.browse(cr, uid, cost_estimate_id)
    lines_len = len(cost_estimate.order_line)
    assert lines_len == 5, (
        "Cost Estimate should have 5 lines, 1 per logistic requisition line "
        " and 1 per transport plan used, got %s" % lines_len)
-
  I check if the information of the transport lines is correct
-
  !python {model: sale.order.line}: |
    tp1_id = ref('transport_plan_tpe_01')
    tp2_id = ref('transport_plan_tpe_02')
    product_ship_id = ref('product_transport')
    tp_obj = self.pool.get('transport.plan')
    tp1, tp2 = tp_obj.browse(cr, uid, [tp1_id, tp2_id])
    line1_ids = self.search(cr, uid,
                            [('product_id', '=', product_ship_id),
                             ('price_unit', '=', tp1.transport_estimated_cost)])
    assert len(line1_ids) == 1, "Missing a line for transport"
    line2_ids = self.search(cr, uid,
                            [('product_id', '=', product_ship_id),
                             ('price_unit', '=', tp2.transport_estimated_cost)])
    assert len(line2_ids) == 1, "Missing a line for transport"
    line1, line2 = self.browse(cr, uid, line1_ids + line2_ids)
    def check(cr, uid, transport_plan, line):
        pass
        # Add assertions here for the propagation of values from the
        # transport plan to the line. Actually there is only the product
        # and the price, already validated by the search above.

    check(cr, uid, tp1, line1)
    check(cr, uid, tp2, line2)
