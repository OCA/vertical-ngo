-
  In order to test the creation of a cost estimate with transport plans.
  I create a transport plan
-
  !record {model: transport.plan, id: transport_plan_tpe_01}:
    transport_mode_id: transport_plan.transport_mode1
    date_eta: !eval "(datetime.now() + timedelta(days=8)).strftime('%Y-%m-%d')"
    date_etd: !eval "(datetime.now() + timedelta(days=2)).strftime('%Y-%m-%d')"
    from_address_id: base.res_partner_3
    to_address_id: base.res_partner_4
    transport_estimated_cost: 1000
-
  And a second transport plan
-
  !record {model: transport.plan, id: transport_plan_tpe_02}:
    transport_mode_id: transport_plan.transport_mode5
    date_eta: !eval "(datetime.now() + timedelta(days=10)).strftime('%Y-%m-%d')"
    date_etd: !eval "(datetime.now() + timedelta(days=3)).strftime('%Y-%m-%d')"
    from_address_id: base.res_partner_3
    to_address_id: base.res_partner_4
    transport_estimated_cost: 1345
-
  And I create a logistic requisition
-
  !record {model: logistic.requisition, id: logistic_requisition_tpe_01}:
    partner_id: base.res_partner_4
    consignee_id: base.res_partner_3
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    user_id: base.user_demo
-
  And I add a line 1
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_tpe_01}:
    requisition_id: logistic_requisition_tpe_01
    product_id: product.product_product_7
    requested_qty: 100
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    budget_tot_price: 1000
    logistic_user_id: base.user_demo
    transport_applicable: 1
    transport_plan_id: transport_plan_tpe_01
    procurement_method: procurement
    price_is: estimated
-
  And I add a line 2
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_tpe_02}:
    requisition_id: logistic_requisition_tpe_01
    product_id: product.product_product_8
    requested_qty: 100
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    budget_tot_price: 1000
    logistic_user_id: base.user_demo
    transport_applicable: 1
    transport_plan_id: transport_plan_tpe_01
    procurement_method: procurement
    price_is: estimated
-
  And I add a line 3
-
  !record {model: logistic.requisition.line, id: logistic_requisition_line_tpe_03}:
    requisition_id: logistic_requisition_tpe_01
    product_id: product.product_product_8
    requested_qty: 100
    date_delivery: !eval "time.strftime('%Y-%m-%d')"
    budget_tot_price: 1000
    logistic_user_id: base.user_demo
    transport_applicable: 1
    transport_plan_id: transport_plan_tpe_02
    procurement_method: procurement
    price_is: estimated
-
  And I confirm the logistic requisition
-
  !python {model: logistic.requisition}: |
    req_id = ref("logistic_requisition_tpe_01")
    self.button_confirm(cr, uid, [req_id])
-
  And I source the lines
-
  !python {model: logistic.requisition.line}: |
    line1_id = ref("logistic_requisition_line_tpe_01")
    line2_id = ref("logistic_requisition_line_tpe_02")
    line3_id = ref("logistic_requisition_line_tpe_03")
    ids = [line1_id, line2_id, line3_id]
    self.button_sourced(cr, uid, ids)
-
  I open the wizard to create a cost estimate from the logistic requisition
-
  !python {model: logistic.requisition.cost.estimate}: |
    context = {'active_model': 'logistic.requisition',
               'active_ids': [ref('logistic_requisition_tpe_01')],
               }
    wizard_id = self.create(cr, uid, {}, context=context)
    open_action = self.cost_estimate(cr, uid, wizard_id)
    cost_estimate_id = open_action['res_id']
    cost_estimate_obj = self.pool.get('sale.order')
    cost_estimate = cost_estimate_obj.browse(cr, uid, cost_estimate_id)
    lines_len = len(cost_estimate.order_line)
    assert lines_len == 5, (
        "Cost Estimate should have 5 lines, 1 per logistic requisition line "
        " and 1 per transport plan used, got %s" % lines_len)
